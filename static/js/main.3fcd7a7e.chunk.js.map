{"version":3,"sources":["Collection.js","refresh.svg","App.js","reportWebVitals.js","index.js"],"names":["Collection","photos","open","className","map","photo","onClick","links","html","src","urls","regular","alt","description","alt_description","join","id","App","useState","setPhotos","api","values","a","resetForm","fetch","search","headers","response","json","data","results","initialValues","onSubmit","style","fontSize","name","refresh","type","url","window","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAkBeA,MAdf,YAAuC,IAAjBC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,KAC5B,OACE,qBAAKC,UAAU,YAAf,SACA,qBAAKA,UAAU,SAAf,SACGF,EAAOG,KAAI,SAAAC,GAAK,OAChB,0BAAwBC,QAAS,kBAAMJ,EAAKG,EAAME,MAAMC,OAAxD,UACI,qBAAKC,IAAKJ,EAAMK,KAAKC,QAASC,IAAI,KAClC,4BAAI,CAACP,EAAMQ,YAAaR,EAAMS,iBAAiBC,KAAK,WAF1CV,EAAMW,YCTZ,MAA0B,oC,MCuD1BC,MA/Cf,WACE,MAA4BC,mBAAS,IAArC,mBAAOjB,EAAP,KAAekB,EAAf,KAEMC,EAAG,uCAAG,WAAOC,EAAP,sBAAAC,EAAA,6DAAgBC,EAAhB,EAAgBA,UAAhB,SACaC,MAAM,4DAAD,OAA6DH,EAAOI,QAAU,CACxGC,QAAQ,CACN,cAAiB,2DAHX,cACJC,EADI,gBAMSA,EAASC,OANlB,OAMJC,EANI,OAOVV,EAAUU,EAAKC,SACfP,IARU,2CAAH,wDAgBT,OACE,gCACC,mCAEG,8BACM,uCAEP,cAAC,IAAD,CACCQ,cAAe,CAACN,OAAQ,IACxBO,SAAUZ,EAFX,SAIG,eAAC,IAAD,WACA,6CACA,cAAC,IAAD,CAAOa,MAAO,CAACC,SAAU,QAASC,KAAK,gBAI1C,qBAAKhC,UAAU,UAAf,SACO,qBAAKG,QAxBG,WAClBa,EAAU,KAuB2BV,IAAK2B,EAASxB,IAAI,GAAGyB,KAAK,eAI7D,cAAC,EAAD,CAAYpC,OAAQA,EAAQC,KAvCnB,SAAAoC,GAAG,OAAIC,OAAOrC,KAAKoC,UCEnBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3fcd7a7e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Article.css'\r\nimport './Content.css'\r\n\r\nfunction Collection({ photos, open }) {\r\n  return (\r\n    <div className=\"container\">\r\n    <div className=\"center\">\r\n      {photos.map(photo=>\r\n       <article key={photo.id} onClick={() => open(photo.links.html)} >\r\n           <img src={photo.urls.regular} alt=\"\" />\r\n           <p>{[photo.description, photo.alt_description].join(' - ')}</p>\r\n       </article> )}\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Collection","export default __webpack_public_path__ + \"static/media/refresh.2047b82f.svg\";","import {useState} from 'react'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport Collection from './Collection'\r\nimport refresh from './refresh.svg'\r\nimport './Header.css'\r\nimport './Content.css'\r\nimport './Article.css'\r\n\r\nfunction App() {\r\n  const [photos, setPhotos] = useState([]);\r\n  const open = url => window.open(url)\r\n  const api = async (values, {resetForm} ) =>{\r\n    const response = await fetch(`https://api.unsplash.com/search/photos?per_page=20&query=${values.search}`, {\r\n      headers:{\r\n        'Authorization': 'Client-ID dWKsEoIGxek0aQWAnGXuyviWEK04cor_wPkrmv9wY88'\r\n      }\r\n    })\r\n    const data = await response.json()\r\n    setPhotos(data.results);\r\n    resetForm()\r\n  }\r\n  const handleReset = ( ) =>{\r\n    setPhotos([])\r\n  }\r\n\r\n  // https://codesandbox.io/s/7122xmovnq?file=/src/index.js\r\n  // console.log({photos});\r\n  return (\r\n    <div >\r\n     <header>\r\n        \r\n        <div>\r\n              <h1>Img</h1>\r\n        </div>\r\n       <Formik\r\n        initialValues={{search: ''}}\r\n        onSubmit={api}\r\n       >\r\n          <Form>\r\n          <label >Search: </label>\r\n          <Field style={{fontSize: \"16px\"}} name='search' />\r\n        </Form>\r\n         \r\n       </Formik>\r\n       <div className='restart' >\r\n              <img onClick={handleReset} src={refresh} alt=\"\" type=\"reset\" />\r\n        </div>\r\n     </header>\r\n\r\n      <Collection photos={photos} open={open}  />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}